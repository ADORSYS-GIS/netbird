# Caddyfile template for NetBird deployment with Caddy as a reverse proxy.
# This file is generated by Ansible from Caddyfile.j2.

{
    # Configure the ACME CA for SSL certificate issuance.
    # ZeroSSL is used here, but you can switch to Let's Encrypt by removing this line.
    acme_ca https://acme.zerossl.com/v2/DV90
    # Email for ACME certificate registration.
    email {{ netbird_caddy_email }}
}

# Define the domain for which Caddy will serve traffic.
{{ netbird_domain }} {
    # Security headers to protect against common web vulnerabilities.
    header {
        # HSTS (HTTP Strict Transport Security) to enforce HTTPS.
        Strict-TransportSecurity max-age=31536000;
        # X-Content-Type-Options to prevent MIME sniffing.
        X-Content-Type-Options nosniff
        # X-Frame-Options to prevent clickjacking.
        X-Frame-Options DENY
        # X-XSS-Protection to enable browser's XSS filter.
        X-XSS-Protection "1; mode=block"
        # Referrer-Policy to control referrer information sent with requests.
        Referrer-Policy "strict-origin-when-cross-origin"
        # Permissions-Policy to control browser features.
        Permissions-Policy "geolocation=(), microphone=(), camera=()"
    }

    # Reverse proxy for NetBird Management gRPC service.
    # Uses HTTP/2 cleartext (h2c) for internal communication.
    reverse_proxy /management.ManagementService/* {
        to management:80
        transport http {
            versions h2c
        }
    }

    # Reverse proxy for NetBird Signal gRPC service.
    # Uses HTTP/2 cleartext (h2c) for internal communication.
    reverse_proxy /signalexchange.SignalExchange/* {
        to signal:80
        transport http {
            versions h2c
        }
    }

    # Reverse proxy for NetBird Signal WebSocket.
    reverse_proxy /ws-proxy/signal* {
        to signal:80
        header_up Host {host}
        header_up X-Real-IP {remote_ip}
        header_up X-Forwarded-For {remote_ip}
        header_up X-Forwarded-Proto {scheme}
        header_up Upgrade {>Upgrade}
        header_up Connection {>Connection}
    }

    # Reverse proxy for NetBird Management WebSocket.
    reverse_proxy /ws-proxy/management* {
        to management:80
        header_up Host {host}
        header_up X-Real-IP {remote_ip}
        header_up X-Forwarded-For {remote_ip}
        header_up X-Forwarded-Proto {scheme}
        header_up Connection {>Connection}
        header_up Upgrade {>Upgrade}
    }

    # Reverse proxy for NetBird Relay WebSocket.
    reverse_proxy /relay* {
        to relay:33080
        header_up Host {host}
        header_up X-Real-IP {remote_ip}
        header_up X-Forwarded-For {remote_ip}
        header_up X-Forwarded-Proto {scheme}
        header_up Upgrade {>Upgrade}
        header_up Connection {>Connection}
    }

    # Reverse proxy for NetBird Management REST API.
    reverse_proxy /api/* {
        to management:80
        header_up Host {host}
        header_up X-Real-IP {remote_ip}
        header_up X-Forwarded-For {remote_ip}
        header_up X-Forwarded-Proto {scheme}
    }

    # Reverse proxy for NetBird Dashboard UI.
    # This is a catch-all route and must be the last reverse_proxy directive.
    reverse_proxy /* {
        to dashboard:80
        header_up Host {host}
        header_up X-Real-IP {remote_ip}
        header_up X-Forwarded-For {remote_ip}
        header_up X-Forwarded-Proto {scheme}
    }
}