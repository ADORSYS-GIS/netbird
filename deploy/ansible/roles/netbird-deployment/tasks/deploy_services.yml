---
- name: Ensure Docker service is running
  systemd:
    name: docker
    state: started
    enabled: yes
  register: docker_service_start

- name: Fix Docker socket permissions
  file:
    path: /var/run/docker.sock
    owner: root
    group: docker
    mode: '0666'
  failed_when: false

- name: Restart Docker service to fix socket issues
  systemd:
    name: docker
    state: restarted
  when: docker_service_start.changed

- name: Wait for Docker to be ready
  pause:
    seconds: 5

- name: Comprehensive Docker diagnosis
  shell: |
    echo "=== DOCKER DIAGNOSIS ==="
    echo "Current user: $(whoami)"
    echo "Current UID: $(id -u)"
    echo "Current groups: $(groups)"
    echo ""
    echo "=== DOCKER SERVICE STATUS ==="
    systemctl status docker --no-pager || true
    echo ""
    echo "=== DOCKER SOCKET DETAILS ==="
    ls -la /var/run/docker.sock || true
    echo ""
    echo "=== DOCKER DAEMON LOGS ==="
    journalctl -u docker --no-pager -n 10 || true
    echo ""
    echo "=== DOCKER VERSION ==="
    docker version || true
    echo ""
    echo "=== DOCKER INFO ATTEMPT ==="
    docker info || true
    echo ""
    echo "=== PROCESS CHECK ==="
    ps aux | grep docker | head -5 || true
  register: docker_diagnosis
  failed_when: false

- name: Display comprehensive Docker diagnosis
  debug:
    msg: "{{ docker_diagnosis.stdout_lines }}"

- name: Try alternative Docker access methods
  shell: |
    echo "=== TRYING DIFFERENT APPROACHES ==="
    echo "1. Direct socket access:"
    curl --unix-socket /var/run/docker.sock http://localhost/version 2>&1 || true
    echo ""
    echo "2. Docker with sudo:"
    sudo docker info 2>&1 || true
    echo ""
    echo "3. Docker daemon running check:"
    pgrep dockerd || echo "Docker daemon not running"
  register: docker_alternatives
  failed_when: false

- name: Display alternative access attempts
  debug:
    msg: "{{ docker_alternatives.stdout_lines }}"

- name: Check if Docker daemon is actually running
  command: pgrep dockerd
  register: dockerd_running
  failed_when: false

- name: Start Docker daemon manually if not running
  shell: |
    if ! pgrep dockerd > /dev/null; then
      echo "Docker daemon not running, starting manually..."
      dockerd --host=unix:///var/run/docker.sock --host=tcp://0.0.0.0:2376 &
      sleep 5
      echo "Docker daemon started"
    else
      echo "Docker daemon already running"
    fi
  register: manual_docker_start
  failed_when: false

- name: Display manual Docker start result
  debug:
    msg: "{{ manual_docker_start.stdout_lines }}"

- name: Final Docker accessibility test
  command: sudo docker info
  register: final_docker_check
  failed_when: false

- name: Display final test result
  debug:
    msg:
      - "Final Docker test return code: {{ final_docker_check.rc }}"
      - "Final Docker test output: {{ final_docker_check.stdout_lines | default(['No output']) }}"
      - "Final Docker test error: {{ final_docker_check.stderr | default('No error') }}"

- name: Conditional failure with detailed info
  fail:
    msg: |
      Docker is still not accessible after all attempts.
      
      DIAGNOSIS SUMMARY:
      - Docker service status: Check the diagnosis output above
      - Socket permissions: Check the socket details above
      - Daemon running: {{ 'Yes' if dockerd_running.rc == 0 else 'No' }}
      - Final test result: {{ final_docker_check.rc }}
      
      NEXT STEPS:
      1. Check if Docker daemon is corrupted
      2. Try manual Docker installation
      3. Check system compatibility
      4. Review Docker logs for specific errors
  when: final_docker_check.rc != 0

- name: Pull Docker images
  command: sudo docker compose pull
  args:
    chdir: "{{ netbird_base_dir }}"
  register: pull_result
  changed_when: "'Pulled' in pull_result.stdout"

- name: Stop existing services (if any)
  command: sudo docker compose down
  args:
    chdir: "{{ netbird_base_dir }}"
  failed_when: false
  register: stop_result

- name: Start NetBird services
  command: sudo docker compose up -d
  args:
    chdir: "{{ netbird_base_dir }}"
  register: start_result

- name: Display service startup status
  debug:
    msg:
      - "‚úÖ NetBird services started"
      - "üê≥ Docker Compose output:"
      - "{{ start_result.stdout_lines }}"

- name: Check service status
  command: sudo docker compose ps
  args:
    chdir: "{{ netbird_base_dir }}"
  register: service_status
  changed_when: false

- name: Display service status
  debug:
    msg:
      - "üìä Service Status:"
      - "{{ service_status.stdout_lines }}"
