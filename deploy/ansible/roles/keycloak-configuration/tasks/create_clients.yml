---
# Clean up existing NetBird clients first (force fresh creation)
- name: Delete existing NetBird web client (if exists)
  command: >
    sudo docker compose exec keycloak /opt/keycloak/bin/kcadm.sh delete clients
    --target-realm {{ keycloak_realm }}
    --query clientId=netbird-client
  args:
    chdir: "{{ netbird_base_dir }}"
  register: web_client_delete
  failed_when: false
  changed_when: web_client_delete.rc == 0

- name: Delete existing NetBird device client (if exists)
  command: >
    sudo docker compose exec keycloak /opt/keycloak/bin/kcadm.sh delete clients
    --target-realm {{ keycloak_realm }}
    --query clientId=netbird-device
  args:
    chdir: "{{ netbird_base_dir }}"
  register: device_client_delete
  failed_when: false
  changed_when: device_client_delete.rc == 0

- name: Delete existing NetBird management client (if exists)
  command: >
    sudo docker compose exec keycloak /opt/keycloak/bin/kcadm.sh delete clients
    --target-realm {{ keycloak_realm }}
    --query clientId=netbird-management
  args:
    chdir: "{{ netbird_base_dir }}"
  register: mgmt_client_delete
  failed_when: false
  changed_when: mgmt_client_delete.rc == 0

- name: Display client deletion status
  debug:
    msg:
      - "ðŸ§¹ Client cleanup completed:"
      - "  - Web Client: {{ 'Deleted' if web_client_delete.rc == 0 else 'Not found' }}"
      - "  - Device Client: {{ 'Deleted' if device_client_delete.rc == 0 else 'Not found' }}"
      - "  - Management Client: {{ 'Deleted' if mgmt_client_delete.rc == 0 else 'Not found' }}"

# Create NetBird Web Client (Fresh)
- name: Check if NetBird web client exists
  command: >
    sudo docker compose exec keycloak /opt/keycloak/bin/kcadm.sh get clients
    --target-realm {{ keycloak_realm }}
    --query clientId=netbird-client
  args:
    chdir: "{{ netbird_base_dir }}"
  register: web_client_check
  changed_when: false

- name: Create NetBird web client (force)
  command: >
    sudo docker compose exec keycloak /opt/keycloak/bin/kcadm.sh create clients
    --target-realm {{ keycloak_realm }}
    --set clientId=netbird-client
    --set name="NetBird Web Client"
    --set enabled=true
    --set publicClient=false
    --set protocol=openid-connect
    --set standardFlowEnabled=true
    --set implicitFlowEnabled=false
    --set directAccessGrantsEnabled=false
    --set serviceAccountsEnabled=false
    --set clientAuthenticatorType=client-secret
  args:
    chdir: "{{ netbird_base_dir }}"
  register: web_client_creation
  changed_when: web_client_creation.rc == 0

- name: Configure web client redirect URIs
  command: >
    sudo docker compose exec keycloak /opt/keycloak/bin/kcadm.sh get clients
    --target-realm {{ keycloak_realm }}
    --query clientId=netbird-client
  args:
    chdir: "{{ netbird_base_dir }}"
  register: web_client_id
  changed_when: false

- name: Debug client ID response
  debug:
    msg: 
      - "Client ID query response: {{ web_client_id.stdout }}"
      - "Parsed JSON: {{ web_client_id.stdout | from_json }}"
  when: web_client_id.stdout != ""

- name: Set web client redirect URIs
  command: >
    sudo docker compose exec keycloak /opt/keycloak/bin/kcadm.sh update clients/{{ (web_client_id.stdout | from_json)[0].id }}
    --target-realm {{ keycloak_realm }}
    --set 'redirectUris=["http://{{ netbird_external_domain }}:{{ netbird_dashboard_port }}","http://localhost:{{ netbird_dashboard_port }}","*","+"]'
    --set 'webOrigins=["http://{{ netbird_external_domain }}:{{ netbird_dashboard_port }}","http://localhost:{{ netbird_dashboard_port }}"]'
    --set 'defaultClientScopes=["openid","profile","email","roles"]'
    --set 'attributes={"access.token.lifespan":"3600","client.session.idle.timeout":"1800","client.session.max.lifespan":"36000"}'
  args:
    chdir: "{{ netbird_base_dir }}"
  when: web_client_id.stdout != "" and web_client_id.stdout != "[]" and (web_client_id.stdout | from_json) | length > 0

# Create NetBird Device Client
- name: Check if NetBird device client exists
  command: >
    sudo docker compose exec keycloak /opt/keycloak/bin/kcadm.sh get clients
    --target-realm {{ keycloak_realm }}
    --query clientId=netbird-device
  args:
    chdir: "{{ netbird_base_dir }}"
  register: device_client_check
  failed_when: false
  changed_when: false

- name: Create NetBird device client (force)
  command: >
    sudo docker compose exec keycloak /opt/keycloak/bin/kcadm.sh create clients
    --target-realm {{ keycloak_realm }}
    --set clientId=netbird-device
    --set name="NetBird Device Client"
    --set description="NetBird CLI Device Client"
    --set enabled=true
    --set publicClient=true
    --set standardFlowEnabled=false
    --set implicitFlowEnabled=false
    --set directAccessGrantsEnabled=false
    --set serviceAccountsEnabled=false
    --set protocol=openid-connect
  args:
    chdir: "{{ netbird_base_dir }}"
  register: device_client_creation
  changed_when: device_client_creation.rc == 0

# Create NetBird Management Client
- name: Check if NetBird management client exists
  command: >
    sudo docker compose exec keycloak /opt/keycloak/bin/kcadm.sh get clients
    --target-realm {{ keycloak_realm }}
    --query clientId=netbird-management
  args:
    chdir: "{{ netbird_base_dir }}"
  register: mgmt_client_check
  failed_when: false
  changed_when: false

- name: Create NetBird management client (force)
  command: >
    sudo docker compose exec keycloak /opt/keycloak/bin/kcadm.sh create clients
    --target-realm {{ keycloak_realm }}
    --set clientId=netbird-management
    --set name="NetBird Management Service"
    --set description="NetBird Management API Client"
    --set enabled=true
    --set clientAuthenticatorType=client-secret
    --set secret="{{ keycloak_mgmt_secret }}"
    --set standardFlowEnabled=false
    --set implicitFlowEnabled=false
    --set directAccessGrantsEnabled=false
    --set serviceAccountsEnabled=true
    --set publicClient=false
    --set protocol=openid-connect
  args:
    chdir: "{{ netbird_base_dir }}"
  register: mgmt_client_creation
  changed_when: mgmt_client_creation.rc == 0

# Assign Service Account Roles to NetBird Management Client
- name: Get NetBird management client service account user ID
  command: >
    sudo docker compose exec keycloak /opt/keycloak/bin/kcadm.sh get clients
    --target-realm {{ keycloak_realm }}
    --query clientId=netbird-management
  args:
    chdir: "{{ netbird_base_dir }}"
  register: mgmt_client_info
  changed_when: false

- name: Get service account user for management client
  command: >
    sudo docker compose exec keycloak /opt/keycloak/bin/kcadm.sh get clients/{{ (mgmt_client_info.stdout | from_json)[0].id }}/service-account-user
    --target-realm {{ keycloak_realm }}
  args:
    chdir: "{{ netbird_base_dir }}"
  register: service_account_user
  when: mgmt_client_info.stdout != "" and mgmt_client_info.stdout != "[]" and (mgmt_client_info.stdout | from_json) | length > 0
  changed_when: false

- name: Assign realm-management client roles to service account
  command: >
    sudo docker compose exec keycloak /opt/keycloak/bin/kcadm.sh add-roles
    --target-realm {{ keycloak_realm }}
    --uid {{ (service_account_user.stdout | from_json).id }}
    --cclientid realm-management
    --rolename {{ item }}
  args:
    chdir: "{{ netbird_base_dir }}"
  loop:
    - view-users
    - manage-users
    - view-clients
    - manage-clients
    - view-realm
    - query-users
    - query-clients
  when: service_account_user is not skipped and service_account_user.stdout != ""
  register: role_assignments
  failed_when: false

- name: Display service account role assignment status
  debug:
    msg:
      - "âœ… NetBird Management service account roles assigned:"
      - "  - view-users, manage-users"
      - "  - view-clients, manage-clients" 
      - "  - view-realm, query-users, query-clients"
  when: service_account_user is not skipped and service_account_user.stdout != ""

- name: Display client creation summary
  debug:
    msg:
      - "âœ… NetBird clients configured (fresh creation):"
      - "  - Web Client: {{ 'Created' if web_client_creation.rc == 0 else 'Failed' }}"
      - "  - Device Client: {{ 'Created' if device_client_creation.rc == 0 else 'Failed' }}"
      - "  - Management Client: {{ 'Created' if mgmt_client_creation.rc == 0 else 'Failed' }}"
