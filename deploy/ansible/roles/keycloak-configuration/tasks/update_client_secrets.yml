---
- name: Get NetBird web client ID
  command: >
    sudo docker compose exec keycloak /opt/keycloak/bin/kcadm.sh get clients
    --target-realm {{ keycloak_realm }}
    --query clientId=netbird-client
  args:
    chdir: "{{ netbird_base_dir }}"
  register: web_client_uuid
  changed_when: false

- name: Debug web client ID response
  debug:
    msg: 
      - "Web Client ID query response: {{ web_client_uuid.stdout }}"
      - "Parsed JSON: {{ web_client_uuid.stdout | from_json }}"
  when: web_client_uuid.stdout != ""

- name: Generate consistent client secret for synchronization
  set_fact:
    consistent_client_secret: "{{ lookup('password', '/dev/null chars=ascii_letters,digits length=32') }}"
  when: netbird_auth_client_secret == 'UPDATE_ME'

- name: Use existing client secret if already set
  set_fact:
    consistent_client_secret: "{{ netbird_auth_client_secret }}"
  when: netbird_auth_client_secret != 'UPDATE_ME'

- name: Set client secret in Keycloak to match our configuration
  command: >
    sudo docker compose exec keycloak /opt/keycloak/bin/kcadm.sh update clients/{{ (web_client_uuid.stdout | from_json)[0].id }}
    --target-realm {{ keycloak_realm }}
    --set secret={{ consistent_client_secret }}
  args:
    chdir: "{{ netbird_base_dir }}"
  when: web_client_uuid.stdout != "" and web_client_uuid.stdout != "[]" and (web_client_uuid.stdout | from_json) | length > 0
  changed_when: true

- name: Verify client secret was set correctly
  command: >
    sudo docker compose exec keycloak /opt/keycloak/bin/kcadm.sh get clients/{{ (web_client_uuid.stdout | from_json)[0].id }}/client-secret
    --target-realm {{ keycloak_realm }}
  args:
    chdir: "{{ netbird_base_dir }}"
  register: verified_client_secret_result
  when: web_client_uuid.stdout != "" and web_client_uuid.stdout != "[]" and (web_client_uuid.stdout | from_json) | length > 0
  changed_when: false

- name: Set retrieved client secret for configuration updates
  set_fact:
    retrieved_client_secret: "{{ consistent_client_secret }}"
  when: web_client_uuid.stdout != "" and web_client_uuid.stdout != "[]" and (web_client_uuid.stdout | from_json) | length > 0

- name: Update environment file with retrieved client secret
  replace:
    path: "{{ netbird_config_dir }}/netbird.env"
    regexp: 'NETBIRD_AUTH_CLIENT_SECRET=.*'
    replace: 'NETBIRD_AUTH_CLIENT_SECRET={{ retrieved_client_secret }}'
    backup: yes
  become: yes
  when: retrieved_client_secret is defined

- name: Update Docker Compose environment file
  replace:
    path: "{{ netbird_base_dir }}/.env"
    regexp: 'NETBIRD_AUTH_CLIENT_SECRET=.*'
    replace: 'NETBIRD_AUTH_CLIENT_SECRET={{ retrieved_client_secret }}'
  become: yes
  when: retrieved_client_secret is defined

- name: Regenerate management.json with updated client secret
  template:
    src: management.json.j2
    dest: "{{ netbird_base_dir }}/management.json"
    owner: "{{ ansible_user }}"
    group: "{{ ansible_user }}"
    mode: '0644'
    backup: yes
  become: yes
  vars:
    netbird_auth_client_secret: "{{ retrieved_client_secret | default(netbird_auth_client_secret) }}"
  when: retrieved_client_secret is defined

- name: Display client secret update status
  debug:
    msg:
      - "✅ Client secrets updated:"
      - "  - Web Client Secret: {{ retrieved_client_secret[:8] }}... (retrieved from Keycloak)"
      - "  - Environment files updated"
      - "  - Management configuration updated"
  when: retrieved_client_secret is defined

- name: Display client secret warning
  debug:
    msg: "⚠️ Warning: Could not retrieve client secret from Keycloak. Using generated secret."
  when: retrieved_client_secret is not defined
