services:
  # PostgreSQL Database
  postgres:
    image: postgres:{{ postgres_version }}
    container_name: netbird-postgres
    networks:
      - netbird-network
    environment:
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_MULTIPLE_DATABASES=netbird,keycloak
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-databases.sh:/docker-entrypoint-initdb.d/init-databases.sh:ro
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Keycloak Identity Provider
  keycloak:
    image: quay.io/keycloak/keycloak:{{ keycloak_version }}
    container_name: netbird-keycloak
    networks:
      - netbird-network
    depends_on:
      postgres:
        condition: service_healthy
    ports:
      - "${KEYCLOAK_HTTP_PORT}:8080"
    environment:
      - KC_DB=${KEYCLOAK_DB_VENDOR}
      - KC_DB_URL=${KEYCLOAK_DB_URL}
      - KC_DB_USERNAME=${KEYCLOAK_DB_USERNAME}
      - KC_DB_PASSWORD=${KEYCLOAK_DB_PASSWORD}
      - KEYCLOAK_ADMIN=${KEYCLOAK_ADMIN}
      - KEYCLOAK_ADMIN_PASSWORD=${KEYCLOAK_ADMIN_PASSWORD}
      - KC_HTTP_PORT=8080
      - KC_HOSTNAME_STRICT=false
      - KC_HTTP_ENABLED=true
      - KC_HOSTNAME=${NETBIRD_DOMAIN}
      - KC_HOSTNAME_PORT=${KEYCLOAK_HTTP_PORT}
      - KC_PROXY=edge
      - KC_HOSTNAME_STRICT_HTTPS=false
    command: ["start-dev"]
    volumes:
      - keycloak_data:/opt/keycloak/data
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "exec 3<>/dev/tcp/localhost/8080"]
      interval: 15s
      timeout: 5s
      retries: 10
      start_period: 60s

  # NetBird Management Service
  management:
    image: netbirdio/management:{{ netbird_version }}
    container_name: netbird-management
    networks:
      - netbird-network
    depends_on:
      postgres:
        condition: service_healthy
      keycloak:
        condition: service_healthy
    ports:
      - "${NETBIRD_MGMT_API_PORT}:80"
    environment:
      - NETBIRD_STORE_ENGINE=${NETBIRD_STORE_CONFIG_ENGINE}
      - NETBIRD_STORE_ENGINE_POSTGRES_DSN=${NETBIRD_STORE_ENGINE_POSTGRES_DSN}
      - NETBIRD_IDP_MGMT_CLIENT_ID=${NETBIRD_IDP_MGMT_CLIENT_ID}
      - NETBIRD_IDP_MGMT_CLIENT_SECRET=${NETBIRD_IDP_MGMT_CLIENT_SECRET}
      - NETBIRD_IDP_MGMT_ADMIN_ENDPOINT=${NETBIRD_IDP_MGMT_ADMIN_ENDPOINT}
      - NETBIRD_IDP_MGMT_ENDPOINT=${NETBIRD_IDP_MGMT_ENDPOINT}
      - NETBIRD_IDP_MGMT_EXTRA_ADMIN_ENDPOINT=${NETBIRD_IDP_MGMT_ADMIN_ENDPOINT}
      - NETBIRD_HTTP_API_CORS_ALLOW_ORIGINS=http://{{ netbird_external_domain }}:{{ netbird_dashboard_port }},http://localhost:{{ netbird_dashboard_port }}
      - NETBIRD_HTTP_API_CORS_ALLOW_HEADERS=Content-Type,Authorization,Accept
      - NETBIRD_HTTP_API_CORS_ALLOW_METHODS=GET,POST,PUT,DELETE,OPTIONS,PATCH
      - NETBIRD_HTTP_API_CORS_ALLOW_CREDENTIALS=true
    volumes:
      - ./management.json:/etc/netbird/management.json:ro
      - netbird_mgmt:/var/lib/netbird
    restart: unless-stopped
    command: [
      "--port", "80",
      "--log-file", "console",
      "--log-level", "debug",
      "--disable-anonymous-metrics=${NETBIRD_DISABLE_ANONYMOUS_METRICS:-false}",
      "--dns-domain=${NETBIRD_MGMT_DNS_DOMAIN:-netbird.selfhosted}"
    ]

  # NetBird Signal Service
  signal:
    image: netbirdio/signal:{{ netbird_version }}
    container_name: netbird-signal 
    networks:
      - netbird-network
    ports:
      - "${NETBIRD_SIGNAL_PORT}:80"
    volumes:
      - netbird_signal:/var/lib/netbird
    restart: unless-stopped

  # NetBird Dashboard
  dashboard:
    image: netbirdio/dashboard:{{ netbird_version }}
    container_name: netbird-dashboard
    networks:
      - netbird-network
    depends_on:
      keycloak:
        condition: service_healthy
      management:
        condition: service_started
    ports:
      - "{{ netbird_dashboard_port }}:80"
    environment:
      - NETBIRD_MGMT_API_ENDPOINT=http://${NETBIRD_DOMAIN}:${NETBIRD_MGMT_API_PORT}
      - NETBIRD_MGMT_GRPC_API_ENDPOINT=http://${NETBIRD_DOMAIN}:${NETBIRD_MGMT_API_PORT}
      - AUTH_AUDIENCE=${NETBIRD_AUTH_AUDIENCE}
      - AUTH_CLIENT_ID=${NETBIRD_AUTH_CLIENT_ID}
      - AUTH_CLIENT_SECRET=${NETBIRD_AUTH_CLIENT_SECRET}
      - AUTH_AUTHORITY=${NETBIRD_AUTH_AUTHORITY}
      - AUTH_SUPPORTED_SCOPES=${NETBIRD_AUTH_SUPPORTED_SCOPES}
      - AUTH_SILENT_REDIRECT_URI=http://${NETBIRD_DOMAIN}:{{ netbird_dashboard_port }}/
      - NETBIRD_TOKEN_SOURCE=idToken
      - NETBIRD_USE_AUTH0=false
      - USE_AUTH0=false
      # Disable HTTPS for development
      - LETSENCRYPT_DOMAIN=none
      - LETSENCRYPT_EMAIL=none
    volumes:
      - letsencrypt_data:/etc/letsencrypt/
    restart: unless-stopped

  # Coturn STUN/TURN Server
  coturn:
    image: coturn/coturn:latest
    container_name: netbird-coturn
    networks:
      - netbird-network
    ports:
      - "{{ netbird_stun_port }}:3478/udp"
      - "{{ netbird_stun_port }}:3478/tcp"
    volumes:
      - ./turnserver.conf:/etc/turnserver.conf:ro
    command: ["-c", "/etc/turnserver.conf"]
    restart: unless-stopped

  # NetBird Relay
  relay:
    image: netbirdio/relay:{{ netbird_version }}
    container_name: netbird-relay
    networks:
      - netbird-network
    ports:
      - "${NETBIRD_RELAY_PORT}:3479"
    environment:
      - NB_LOG_LEVEL=info
      - NB_LISTEN_ADDRESS=:3479
      - NB_EXPOSED_ADDRESS=${NETBIRD_DOMAIN}:${NETBIRD_RELAY_PORT}
      - NB_AUTH_SECRET=${NETBIRD_RELAY_AUTH_SECRET}
    restart: unless-stopped

networks:
  netbird-network:
    driver: bridge
    name: netbird-network

volumes:
  postgres_data:
  keycloak_data:
  netbird_mgmt:
  netbird_signal:
  letsencrypt_data:
